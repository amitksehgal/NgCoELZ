{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "enterpriseScaleCompanyPrefix": {
      "type": "string",
      "maxLength": 10,
      "metadata": {
        "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale."
      }
    },
    "managementSubscriptionId": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 36,
      "metadata": {
        "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for management. If you don't want to bring a subscription, leave this parameter empty as is."
      }
    },
    "connectivitySubscriptionId": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 36,
      "metadata": {
        "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for networking."
      }
    },
    "identitySubscriptionId": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 36,
      "metadata": {
        "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for identity."
      }
    },
    "denySubnetWithoutNsgForIdentity": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether policy to deny subnet without NSG should be assigned or not."
      }
    },
    "denyRdpForIdentity": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether policy to deny inbound RDP should be assigned or not."
      }
    },
    "denyPipForIdentity": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether policy to deny puplic IP should be assigned or not."
      }
    },
    "enableVmBackupForIdentity": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether policy to enable VM backup should be assigned or not."
      }
    },
    "nonCorpLzSubscriptionId": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first online landing zones."
      }
    },
    "corpLzSubscriptionId": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones."
      }
    },
    "corpConnectedLzSubscriptionId": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones and connect to virtual networking hub."
      }
    },
    "enableLogAnalytics": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
      }
    },
    "retentionInDays": {
      "type": "string",
      "defaultValue": "15",
      "metadata": {
        "description": "Select data retention (days) for Log Analytics."
      }
    },
    "enableAsc": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
      }
    },
    "enableAksPolicy": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether AKS policy should be assigned or not."
      }
    },
    "emailContactAsc": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Email address for Azure Security Center contact details."
      }
    },
    "enableAscForServers": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": ["Standard", "Free"],
      "metadata": {
        "description": "Azure Defender pricing tier for Virtual Machines"
      }
    },
    "enableAscForAppServices": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": ["Standard", "Free"],
      "metadata": {
        "description": "Azure Defender pricing tier for App Services"
      }
    },
    "enableAscForStorage": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": ["Standard", "Free"],
      "metadata": {
        "description": "Azure Defender pricing tier for Storage Accounts"
      }
    },
    "enableAscForSql": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": ["Standard", "Free"],
      "metadata": {
        "description": "Azure Defender pricing tier for Azure SQL Databases"
      }
    },
    "enableAscForSqlOnVm": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": ["Standard", "Free"],
      "metadata": {
        "description": "Azure Defender pricing tier for Azure SQL on VMs"
      }
    },
    "enableAscForKeyVault": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": ["Standard", "Free"],
      "metadata": {
        "description": "Azure Defender pricing tier for Azure Key Vault"
      }
    },
    "enableAscForArm": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": ["Standard", "Free"],
      "metadata": {
        "description": "Azure Defender pricing tier for ARM"
      }
    },
    "enableAscForDns": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": ["Standard", "Free"],
      "metadata": {
        "description": "Azure Defender pricing tier for DNS"
      }
    },
    "enableAscForKubernetes": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": ["Standard", "Free"],
      "metadata": {
        "description": "Azure Defender pricing tier for AKS"
      }
    },
    "enableAscForRegistries": {
      "type": "string",
      "defaultValue": "Free",
      "allowedValues": ["Standard", "Free"],
      "metadata": {
        "description": "Azure Defender pricing tier for ACR"
      }
    },
    "denyAksPrivileged": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether AKS privileged policy should be assigned or not."
      }
    },
    "denyAksPrivilegedEscalation": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether AKS escalation policy should be assigned or not."
      }
    },
    "denyHttpIngressForAks": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether ingess policy for AKS should be assigned or not."
      }
    },
    "enableArcMonitoring": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "If 'Yes' is selected, policy will be assigned to enforce Arc monitoring."
      }
    },
    "enableVmMonitoring": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "If 'Yes' is selected, policy will be assigned to enforce VM monitoring."
      }
    },
    "enableVmssMonitoring": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "If 'Yes' is selected, policy will be assigned to enforce VMSS monitoring."
      }
    },
    "enableSecuritySolution": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether security solutions should be enabled or not."
      }
    },
    "enableEncryptionInTransit": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select if encryption in transit policy should be assigned or not."
      }
    },
    "enableAgentHealth": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether agent health solution should be enabled or not."
      }
    },
    "enableChangeTracking": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether change tracking solution should be enabled or not."
      }
    },
    "enableUpdateMgmt": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether update mgmanagement solution should be enabled or not."
      }
    },
    "enableActivityLog": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether activity log solution should be enabled or not."
      }
    },
    "enableVmInsights": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether VM insights solution should be enabled or not."
      }
    },
    "enableServiceMap": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether service map solution should be enabled or not."
      }
    },
    "enableSqlAssessment": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether sql assessment solution should be enabled or not."
      }
    },
    "enableSqlAudit": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether SQL audit policy should be assigned or not."
      }
    },
    "enableSqlEncryption": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether SQL encryption policy should be assigned or not."
      }
    },
    "enableVmBackup": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether VM backup policy should be assigned or not."
      }
    },
    "denyRdp": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether RDP policy should be assigned or not."
      }
    },
    "denyPublicEndpoints": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select if policy to deny public endpoint should be assigned or not."
      }
    },
    "enableStorageHttps": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether storage HTTPS policy should be assigned or not."
      }
    },
    "enableLzDdoS": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether DDoS Protection standard should be enabled or not."
      }
    },
    "denyIpForwarding": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether IP forwarding policy should be assigned or not."
      }
    },
    "denySubnetWithoutNsg": {
      "type": "string",
      "allowedValues": ["Yes", "No"],
      "defaultValue": "No",
      "metadata": {
        "description": "Select whether subnet with NSG policy should be assigned or not."
      }
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address prefix of the HUB"
      }
    },
    "enableVpnGw": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether the VPN Gateway should be deployed or not."
      }
    },
    "enableErGw": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether the ExpressRoute Gateway should be deployed or not."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Location of the HUB"
      }
    },
    "enableHub": {
      "type": "string",
      "allowedValues": ["Yes", "No"],
      "defaultValue": "No",
      "metadata": {
        "description": "Select whether the virtual network hub should be deployed or not."
      }
    },
    "enableAzFw": {
      "type": "string",
      "allowedValues": ["Yes", "No"],
      "defaultValue": "No",
      "metadata": {
        "description": "Select whether the Azure Firewall should be deployed or not."
      }
    },
    "enableAzFwDnsProxy": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether the Azure Firewall should be used as DNS Proxy or not."
      }
    },
    "enableDdoS": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": "Select whether the DDoS Standard protection plan should be enabled or not."
      }
    },
    "subnetMaskForAzFw": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Provide subnet for Azure Firewall."
      }
    },
    "subnetMaskForGw": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Provide subnet for VPN/ER."
      }
    },
    "gwRegionalOrAz": {
      "type": "string",
      "defaultValue": "Zone",
      "metadata": {
        "description": "Deploy zone redundant or regional VPN Gateway"
      }
    },
    "gwAzSku": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Select the VPN Gateway SKU (Zone)"
      }
    },
    "gwRegionalSku": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Select the VPN Gateway SKU (Regional)"
      }
    },
    "erRegionalOrAz": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Deploy zone redundant or regional ExpressRoute Gateway"
      }
    },
    "erAzSku": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Select the ExpressRoute Gateway SKU (Zone)"
      }
    },
    "erRegionalSku": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Select the ExpressRoute Gateway SKU (Regional)"
      }
    },
    "firewallZones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": ""
      }
    },
    "paToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "GitHub personal access token"
      }
    },
    "principalId": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Provide the Service Principal ID which is needed to create GitHub secret."
      }
    },
    "appId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Application ID"
      }
    },
    "principalSecret": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Provide the secret for the service principal."
      }
    },
    "gitHubUserNameOrOrg": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Provide GitHub organization or username"
      }
    },
    "repositoryName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Provide a name for the new repository that will be created"
      }
    },
    "enableAzOps": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": ["Yes", "No"],
      "metadata": {
        "description": ""
      }
    },
    "subscriptionId": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 36,
      "metadata": {
        "description": ""
      }
    }
  },
  "variables": {
    "azPolicyEnvMapping": "templates/policies.json",
    "azEnvPolicy": "[variables('azPolicyEnvMapping')]",
    "deploymentUris": {
      "managementGroups": "[uri(deployment().properties.templateLink.uri, 'templates/mgmtGroups.json')]",
      "policyDefinitions": "[concat(uri(deployment().properties.templateLink.uri, variables('azEnvPolicy')))]",
      "monitoring": "[uri(deployment().properties.templateLink.uri, 'templates/logAnalytics.json')]",
      "monitoringSolutions": "[uri(deployment().properties.templateLink.uri, 'templates/logAnalyticsSolutions.json')]",
      "connectivity": "[uri(deployment().properties.templateLink.uri, 'templates/hubspoke-connectivity.json')]",
      "diagnosticsAndSecurity": "[uri(deployment().properties.templateLink.uri, 'templates/diagnosticsAndSecurity.json')]",
      "landingZone": "[uri(deployment().properties.templateLink.uri, 'templates/lz.json')]",
      "identity": "[uri(deployment().properties.templateLink.uri, 'templates/identity.json')]",
      "corpConnectedLzs": "[uri(deployment().properties.templateLink.uri, 'templates/corp-peering-copy.json')]",
      "azOps": "[uri(deployment().properties.templateLink.uri, 'templates/azOpsSetup.json')]"
    },
    "moveSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-management', '/', parameters('managementSubscriptionId'))]",
    "noSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-management', '/', 'na')]",
    "noNonCorpLzSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-noncorp', '/', 'nalz')]",
    "noCorpLzSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-corp', '/', 'nalz')]",
    "noCorpConnectedLzSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-corp', '/', 'naconnect')]",
    "connectivityMoveSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-connectivity', '/', parameters('connectivitySubscriptionId'))]",
    "noConnectivitySubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-connectivity', '/', 'naconn')]",
    "identityMoveSubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-identity', '/', parameters('identitySubscriptionId'))]",
    "noIdentitySubscription": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-identity', '/', 'naid')]",
    "deploymentNames": {
      "mgmtGroupDeploymentName": "[take(concat('Enterprise-Mgs', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
      "policyDeploymentName": "[take(concat('Enterprise-Policy', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
      "monitoringDeploymentName": "[take(concat('Enterprise-Monitoring', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
      "monitoringSolutionsDeploymentName": "[take(concat('Enterprise-Solutions', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
      "diagAndSecDeploymentName": "[take(concat('Enterprise-DiagSec', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
      "connectivityDeploymentName": "[take(concat('Enterprise-Networking', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
      "lzDeploymentName": "[take(concat('Enterprise-LZ', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
      "identityDeploymentName": "[take(concat('Enterprise-Identity', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
      "corpConnectedDeploymentName": "[take(concat('Enterprise-lz-connectivity', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
      "azOpsDeploymentName": "[take(concat('Enterprise-AzOps', '-', deployment().location, guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[variables('deploymentNames').mgmtGroupDeploymentName]",
      "location": "[deployment().location]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('deploymentUris').managementGroups]"
        },
        "parameters": {
          "topLevelManagementGroupPrefix": {
            "value": "[parameters('enterpriseScaleCompanyPrefix')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[variables('deploymentNames').policyDeploymentName]",
      "location": "[deployment().location]",
      "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
      "dependsOn": ["[variables('deploymentNames').mgmtGroupDeploymentName]"],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('deploymentUris').policyDefinitions]"
        },
        "parameters": {
          "topLevelManagementGroupPrefix": {
            "value": "[parameters('enterpriseScaleCompanyPrefix')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-10-01",
      "name": "[concat('preparingToLaunch', copyIndex())]",
      "location": "[deployment().location]",
      "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
      "dependsOn": ["[variables('deploymentNames').policyDeploymentName]"],
      "copy": {
        "batchSize": 1,
        "count": 20,
        "mode": "Serial",
        "name": "policyCompletion"
      },
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "resources": [],
          "outputs": {}
        }
      }
    },
    {
      "condition": "[not(empty(parameters('managementSubscriptionId')))]",
      "type": "Microsoft.Management/managementGroups/subscriptions",
      "apiVersion": "2020-05-01",
      "name": "[if(not(empty(parameters('managementSubscriptionId'))), variables('moveSubscription'), variables('noSubscription'))]",
      "dependsOn": ["[variables('deploymentNames').mgmtGroupDeploymentName]"],
      "properties": {}
    },
    {
      "condition": "[not(empty(parameters('identitySubscriptionId')))]",
      "type": "Microsoft.Management/managementGroups/subscriptions",
      "apiVersion": "2020-05-01",
      "name": "[if(not(empty(parameters('identitySubscriptionId'))), variables('identityMoveSubscription'), variables('noIdentitySubscription'))]",
      "dependsOn": ["[variables('deploymentNames').mgmtGroupDeploymentName]"],
      "properties": {}
    },
    {
      "condition": "[not(empty(parameters('nonCorpLzSubscriptionId')))]",
      "type": "Microsoft.Management/managementGroups/subscriptions",
      "apiVersion": "2020-05-01",
      "name": "[if(not(empty(parameters('nonCorpLzSubscriptionId'))), concat(parameters('enterpriseScaleCompanyPrefix'), '-noncorporate', '/', parameters('nonCorpLzSubscriptionId')[copyIndex()]), variables('noNonCorpLzSubscription'))]",
      "dependsOn": ["[variables('deploymentNames').mgmtGroupDeploymentName]"],
      "copy": {
        "name": "nonCorpLzMove",
        "count": "[length(parameters('nonCorpLzSubscriptionId'))]"
      },
      "properties": {}
    },
    {
      "condition": "[not(empty(parameters('corpLzSubscriptionId')))]",
      "type": "Microsoft.Management/managementGroups/subscriptions",
      "apiVersion": "2020-05-01",
      "name": "[if(not(empty(parameters('corpLzSubscriptionId'))), concat(parameters('enterpriseScaleCompanyPrefix'), '-corporate', '/', parameters('corpLzSubscriptionId')[copyIndex()]), variables('noCorpLzSubscription'))]",
      "dependsOn": ["[variables('deploymentNames').mgmtGroupDeploymentName]"],
      "copy": {
        "name": "corpLzMove",
        "count": "[length(parameters('corpLzSubscriptionId'))]"
      },
      "properties": {}
    },
    {
      "condition": "[not(empty(parameters('corpConnectedLzSubscriptionId')))]",
      "type": "Microsoft.Management/managementGroups/subscriptions",
      "apiVersion": "2020-05-01",
      "name": "[if(not(empty(parameters('corpConnectedLzSubscriptionId'))), concat(parameters('enterpriseScaleCompanyPrefix'), '-corp', '/', parameters('corpConnectedLzSubscriptionId')[copyIndex()].subs), variables('noCorpConnectedLzSubscription'))]",
      "dependsOn": ["[variables('deploymentNames').mgmtGroupDeploymentName]"],
      "copy": {
        "name": "connectedCorpLzMove",
        "count": "[length(parameters('corpConnectedLzSubscriptionId'))]"
      },
      "properties": {}
    },
    {
      "condition": "[and(not(empty(parameters('managementSubscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'), '-management')]",
      "name": "[variables('deploymentNames').monitoringDeploymentName]",
      "dependsOn": [
        "[variables('deploymentNames').policyDeploymentName]",
        "policyCompletion"
      ],
      "location": "[deployment().location]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('deploymentUris').monitoring]"
        },
        "parameters": {
          "topLevelManagementGroupPrefix": {
            "value": "[parameters('enterpriseScaleCompanyPrefix')]"
          },
          "enableLogAnalytics": {
            "value": "[parameters('enableLogAnalytics')]"
          },
          "managementSubscriptionId": {
            "value": "[parameters('managementSubscriptionId')]"
          },
          "retentionInDays": {
            "value": "[parameters('retentionInDays')]"
          }
        }
      }
    },
    {
      "condition": "[and(not(empty(parameters('managementSubscriptionId'))), or(or(or(or(or(equals(parameters('enableSecuritySolution'), 'Yes'), equals(parameters('enableAgentHealth'), 'Yes')), equals(parameters('enableChangeTracking'), 'Yes')), equals(parameters('enableUpdateMgmt'), 'Yes'), equals(parameters('enableActivityLog'), 'Yes')), equals(parameters('enableVmInsights'), 'Yes')), equals(parameters('enableServiceMap'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "subscriptionId": "[parameters('managementSubscriptionId')]",
      "name": "[variables('deploymentNames').monitoringSolutionsDeploymentName]",
      "dependsOn": ["[variables('deploymentNames').monitoringDeploymentName]"],
      "location": "[deployment().location]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('deploymentUris').monitoringSolutions]"
        },
        "parameters": {
          "topLevelManagementGroupPrefix": {
            "value": "[parameters('enterpriseScaleCompanyPrefix')]"
          },
          "managementSubscriptionId": {
            "value": "[parameters('managementSubscriptionId')]"
          },
          "enableSecuritySolution": {
            "value": "[parameters('enableSecuritySolution')]"
          },
          "enableAgentHealth": {
            "value": "[parameters('enableAgentHealth')]"
          },
          "enableChangeTracking": {
            "value": "[parameters('enableChangeTracking')]"
          },
          "enableUpdateMgmt": {
            "value": "[parameters('enableUpdateMgmt')]"
          },
          "enableActivityLog": {
            "value": "[parameters('enableActivityLog')]"
          },
          "enableVmInsights": {
            "value": "[parameters('enableVmInsights')]"
          },
          "enableServiceMap": {
            "value": "[parameters('enableServiceMap')]"
          },
          "enableSqlAssessment": {
            "value": "[parameters('enableSqlAssessment')]"
          }
        }
      }
    },
    {
      "condition": "[not(empty(parameters('identitySubscriptionId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'), '-identity')]",
      "name": "[variables('deploymentNames').identityDeploymentName]",
      "dependsOn": [
        "[variables('deploymentNames').policyDeploymentName]",
        "policyCompletion"
      ],
      "location": "[deployment().location]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('deploymentUris').identity]"
        },
        "parameters": {
          "topLevelManagementGroupPrefix": {
            "value": "[parameters('enterpriseScaleCompanyPrefix')]"
          },
          "denyRdpForIdentity": {
            "value": "[parameters('denyRdpForIdentity')]"
          },
          "denySubnetWithoutNsgForIdentity": {
            "value": "[parameters('denySubnetWithoutNsgForIdentity')]"
          },
          "denyPipForIdentity": {
            "value": "[parameters('denyPipForIdentity')]"
          },
          "enableVmBackupForIdentity": {
            "value": "[parameters('enableVmBackupForIdentity')]"
          }
        }
      }
    },
    {
      "condition": "[or(or(or(or(or(or(or(equals(parameters('enableEncryptionInTransit'), 'Yes'), equals(parameters('denyPublicEndpoints'), 'Yes')), equals(parameters('enableVmBackup'), 'Yes'), equals(parameters('enableSqlAudit'), 'Yes')), equals(parameters('denyAksPrivilegedEscalation'), 'Yes'), equals(parameters('denyHttpIngressForAks'), 'Yes')), equals(parameters('denyAksPrivileged'), 'Yes'), equals(parameters('denyAksPrivileged'), 'Yes')), equals(parameters('denySubnetWithoutNsg'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes')), equals(parameters('enableVmMonitoring'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Yes')), equals(parameters('enableSqlEncryption'), 'Yes'), equals(parameters('enableStorageHttps'), 'Yes'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'), '-landingzones')]",
      "name": "[variables('deploymentNames').lzDeploymentName]",
      "dependsOn": [
        "[variables('deploymentNames').policyDeploymentName]",
        "policyCompletion"
      ],
      "location": "[deployment().location]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('deploymentUris').landingZone]"
        },
        "parameters": {
          "topLevelManagementGroupPrefix": {
            "value": "[parameters('enterpriseScaleCompanyPrefix')]"
          },
          "denyHttpIngressForAks": {
            "value": "[parameters('denyHttpIngressForAks')]"
          },
          "denyAksPrivilegedEscalation": {
            "value": "[parameters('denyAksPrivilegedEscalation')]"
          },
          "denyAksPrivileged": {
            "value": "[parameters('denyAksPrivileged')]"
          },
          "enableSqlAudit": {
            "value": "[parameters('enableSqlAudit')]"
          },
          "enableSqlEncryption": {
            "value": "[parameters('enableSqlEncryption')]"
          },
          "enableVmBackup": {
            "value": "[parameters('enableVmBackup')]"
          },
          "denyRdp": {
            "value": "[parameters('denyRdp')]"
          },
          "enableAksPolicy": {
            "value": "[parameters('enableAksPolicy')]"
          },
          "enableStorageHttps": {
            "value": "[parameters('enableStorageHttps')]"
          },
          "denyIpForwarding": {
            "value": "[parameters('denyIpForwarding')]"
          },
          "denySubnetWithoutNsg": {
            "value": "[parameters('denySubnetWithoutNsg')]"
          },
          "connectivitySubscriptionId": {
            "value": "[parameters('connectivitySubscriptionId')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enableLzDdoS": {
            "value": "[parameters('enableLzDdoS')]"
          },
          "denyPublicEndpoints": {
            "value": "[parameters('denyPublicEndpoints')]"
          },
          "enableEncryptionInTransit": {
            "value": "[parameters('enableEncryptionInTransit')]"
          }
        }
      }
    },
    {
      "condition": "[and(not(empty(parameters('managementSubscriptionId'))), or(equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAsc'), 'Yes')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
      "name": "[variables('deploymentNames').diagAndSecDeploymentName]",
      "dependsOn": ["[variables('deploymentNames').monitoringDeploymentName]"],
      "location": "[deployment().location]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('deploymentUris').diagnosticsAndSecurity]"
        },
        "parameters": {
          "topLevelManagementGroupPrefix": {
            "value": "[parameters('enterpriseScaleCompanyPrefix')]"
          },
          "enableLogAnalytics": {
            "value": "[parameters('enableLogAnalytics')]"
          },
          "enableAsc": {
            "value": "[parameters('enableAsc')]"
          },
          "emailContactAsc": {
            "value": "[parameters('emailContactAsc')]"
          },
          "enableAscForServers": {
            "value": "[parameters('enableAscForServers')]"
          },
          "enableAscForAppServices": {
            "value": "[parameters('enableAscForAppServices')]"
          },
          "enableAscForStorage": {
            "value": "[parameters('enableAscForStorage')]"
          },
          "enableAscForSql": {
            "value": "[parameters('enableAscForSql')]"
          },
          "enableAscForSqlOnVm": {
            "value": "[parameters('enableAscForSqlOnVm')]"
          },
          "enableAscForKeyVault": {
            "value": "[parameters('enableAscForKeyVault')]"
          },
          "enableAscForArm": {
            "value": "[parameters('enableAscForArm')]"
          },
          "enableAscForDns": {
            "value": "[parameters('enableAscForDns')]"
          },
          "enableAscForKubernetes": {
            "value": "[parameters('enableAscForKubernetes')]"
          },
          "enableAscForRegistries": {
            "value": "[parameters('enableAscForRegistries')]"
          },
          "managementSubscriptionId": {
            "value": "[parameters('managementSubscriptionId')]"
          },
          "nonCorpLzSubscriptionId": {
            "value": "[parameters('nonCorpLzSubscriptionId')]"
          },
          "corpLzSubscriptionId": {
            "value": "[parameters('corpLzSubscriptionId')]"
          },
          "corpConnectedLzSubscriptionId": {
            "value": "[parameters('corpConnectedLzSubscriptionId')]"
          },
          "identitySubscriptionId": {
            "value": "[parameters('identitySubscriptionId')]"
          },
          "connectivitySubscriptionId": {
            "value": "[parameters('connectivitySubscriptionId')]"
          },
          "enableVmMonitoring": {
            "value": "[parameters('enableVmMonitoring')]"
          },
          "enableVmssMonitoring": {
            "value": "[parameters('enableVmssMonitoring')]"
          },
          "enableArcMonitoring": {
            "value": "[parameters('enableArcMonitoring')]"
          }
        }
      }
    },
    {
      "condition": "[not(empty(parameters('connectivitySubscriptionId')))]",
      "type": "Microsoft.Management/managementGroups/subscriptions",
      "apiVersion": "2020-05-01",
      "name": "[if(not(empty(parameters('connectivitySubscriptionId'))), variables('connectivityMoveSubscription'), variables('noConnectivitySubscription'))]",
      "dependsOn": [
        "[variables('deploymentNames').policyDeploymentName]",
        "policyCompletion"
      ],
      "properties": {}
    },
    {
      "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'Yes'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'), '-connectivity')]",
      "name": "[variables('deploymentNames').connectivityDeploymentName]",
      "dependsOn": ["[variables('deploymentNames').diagAndSecDeploymentName]"],
      "location": "[deployment().location]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('deploymentUris').connectivity]"
        },
        "parameters": {
          "topLevelManagementGroupPrefix": {
            "value": "[parameters('enterpriseScaleCompanyPrefix')]"
          },
          "enableHub": {
            "value": "[parameters('enableHub')]"
          },
          "enableAzFw": {
            "value": "[parameters('enableAzFw')]"
          },
          "addressPrefix": {
            "value": "[parameters('addressPrefix')]"
          },
          "enableVpnGw": {
            "value": "[parameters('enableVpnGw')]"
          },
          "enableErGw": {
            "value": "[parameters('enableErGw')]"
          },
          "enableDdoS": {
            "value": "[parameters('enableDdoS')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "connectivitySubscriptionId": {
            "value": "[parameters('connectivitySubscriptionId')]"
          },
          "subnetMaskForAzFw": {
            "value": "[parameters('subnetMaskForAzFw')]"
          },
          "subnetMaskForGw": {
            "value": "[parameters('subnetMaskForGw')]"
          },
          "firewallZones": {
            "value": "[parameters('firewallZones')]"
          },
          "enableAzFwDnsProxy": {
            "value": "[parameters('enableAzFwDnsProxy')]"
          },
          "gwRegionalOrAz": {
            "value": "[parameters('gwRegionalOrAz')]"
          },
          "gwAzSku": {
            "value": "[parameters('gwAzSku')]"
          },
          "gwRegionalSku": {
            "value": "[parameters('gwRegionalSku')]"
          },
          "erRegionalOrAz": {
            "value": "[parameters('erRegionalOrAz')]"
          },
          "erAzSku": {
            "value": "[parameters('erAzSku')]"
          },
          "erRegionalSku": {
            "value": "[parameters('erRegionalSku')]"
          }
        }
      }
    },
    {
      "condition": "[and(not(empty(parameters('corpConnectedLzSubscriptionId'))),equals(parameters('enableHub'), 'Yes'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2019-05-01",
      "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'), '-corp')]",
      "name": "[variables('deploymentNames').corpConnectedDeploymentName]",
      "dependsOn": [
        "[variables('deploymentNames').connectivityDeploymentName]",
        "[variables('deploymentNames').diagAndSecDeploymentName]"
      ],
      "location": "[deployment().location]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('deploymentUris').corpConnectedLzs]"
        },
        "parameters": {
          "topLevelManagementGroupPrefix": {
            "value": "[parameters('enterpriseScaleCompanyPrefix')]"
          },
          "corpConnectedLzSubscriptionId": {
            "value": "[parameters('corpConnectedLzSubscriptionId')]"
          },
          "connectivitySubscriptionId": {
            "value": "[parameters('connectivitySubscriptionId')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        }
      }
    },
    {
      "condition": "[and(equals(parameters('enableAzOps'), 'Yes'), not(empty(parameters('principalSecret'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
      "name": "[variables('deploymentNames').azOpsDeploymentName]",
      "location": "[deployment().location]",
      "dependsOn": [
        "[variables('deploymentNames').lzDeploymentName]",
        "[variables('deploymentNames').diagAndSecDeploymentName]",
        "[variables('deploymentNames').mgmtGroupDeploymentName]",
        "[variables('deploymentNames').monitoringDeploymentName]",
        "[variables('deploymentNames').monitoringSolutionsDeploymentName]",
        "[variables('deploymentNames').policyDeploymentName]",
        "[variables('deploymentNames').connectivityDeploymentName]",
        "[variables('deploymentNames').corpConnectedDeploymentName]",
        "[variables('deploymentNames').identityDeploymentName]",
        "policyCompletion"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('deploymentUris').azOps]"
        },
        "parameters": {
          "paToken": {
            "value": "[parameters('paToken')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "principalSecret": {
            "value": "[parameters('principalSecret')]"
          },
          "gitHubUserNameOrOrg": {
            "value": "[parameters('gitHubUserNameOrOrg')]"
          },
          "topLevelManagementGroupPrefix": {
            "value": "[parameters('enterpriseScaleCompanyPrefix')]"
          },
          "subscriptionId": {
            "value": "[parameters('subscriptionId')]"
          },
          "appId": {
            "value": "[parameters('appId')]"
          },
          "repositoryName": {
            "value": "[parameters('repositoryName')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "deployment": {
      "type": "string",
      "value": "[concat(deployment().name, ' has successfully deployed. Welcome to Enterprise-Scale!')]"
    }
  }
}
